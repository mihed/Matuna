# <Copyright Holder>. Copyright (C) <Copyright Year(s)>. <License>.

#
# Debugging Options
#

SET (CMAKE_VERBOSE_MAKEFILE 0) # Use 1 for debugging, 0 for release

#
# Project Properties
#

CMAKE_MINIMUM_REQUIRED (VERSION 3.2.0)
PROJECT (ATML)
SET (APPLICATION_NAME "ATML")
SET (APPLICATION_CODENAME "Platon")
SET (APPLICATION_COPYRIGHT_YEARS "2015")
SET (APPLICATION_VERSION_MAJOR 0)
SET (APPLICATION_VERSION_MINOR 1)
SET (APPLICATION_VERSION_PATCH 0)
SET (APPLICATION_VERSION_TYPE SNAPSHOT)
SET (APPLICATION_VERSION_STRING "${APPLICATION_VERSION_MAJOR}.${APPLICATION_VERSION_MINOR}.${APPLICATION_VERSION_PATCH}-${APPLICATION_VERSION_TYPE}")
SET (APPLICATION_VENDOR_ID "com.yourcompany")
SET (APPLICATION_VENDOR_NAME "Your Company")
SET (APPLICATION_VENDOR_URL "yourcompany.com")
SET (APPLICATION_ID "${APPLICATION_VENDOR_ID}.${PROJECT_NAME}")

#
# Project Output Paths
#

SET (MAINFOLDER "${PROJECT_SOURCE_DIR}/..")
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")

#
# Moving headers to include.
#

FILE(REMOVE_RECURSE ${MAINFOLDER}/include)
FILE(MAKE_DIRECTORY ${MAINFOLDER}/include)

#TODO: make sure we keep the folder structure
FILE (GLOB ATML_HEADERS *.h *.hpp)
FILE(COPY ${ATML_HEADERS} DESTINATION ${MAINFOLDER}/include)

#
# Project Search Paths
#

SET (ALL_INCLUDE_DIRECTORIES "${MAINFOLDER}/include")
LIST (APPEND ALL_INCLUDE_DIRECTORIES "${MAINFOLDER}/thirdparty/include") 
INCLUDE_DIRECTORIES(${ALL_INCLUDE_DIRECTORIES})

LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/tools")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/thirdparty")
SET (CMAKE_MODULE_PATH "${MAINFOLDER}/share/cmake")

#
# Locate Project Prerequisites 
#

FIND_PACKAGE(OpenCL REQUIRED)
IF(DEFINED OpenCL_INCLUDE_DIRS)
	INCLUDE_DIRECTORIES(${OpenCL_INCLUDE_DIRS})
ELSEIF(DEFINED OpenCL_INCLUDES)
	INCLUDE_DIRECTORIES(${OpenCL_INCLUDES})
ELSE (DEFINED OpenCL_INCLUDE_DIRS)
	MESSAGE(FATAL_ERROR "The OpenCL include directory could not be found")
ENDIF(DEFINED OpenCL_INCLUDE_DIRS)

IF(DEFINED OpenCL_LIBRARIES)
	LINK_DIRECTORIES(${OpenCL_LIBRARIES})
ELSEIF(DEFINED OpenCL_LIBS)
	LINK_DIRECTORIES(${OpenCL_LIBS})
ELSE(DEFINED OpenCL_LIBRARIES)
	MESSAGE(FATAL_ERROR "The OpenCL library directory could not be found")
ENDIF(DEFINED OpenCL_LIBRARIES)

#
# Configure Files
#

FILE (GLOB_RECURSE CONFIGINPUTS1 ${MAINFOLDER}/include/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS2 ${MAINFOLDER}/include/*.h.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS3 ${MAINFOLDER}/src/*.in.h.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS4 ${MAINFOLDER}/src/*.h.in.cmake)
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS2}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
FOREACH (CONFIGINPUT ${CONFIGINPUTS})
    STRING (REPLACE ".in.h.cmake" ".h" CONFIGOUTPUT1 "${CONFIGINPUT}")
    STRING (REPLACE ".h.in.cmake" ".h" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
    CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

#
# Add Build Targets
#

ADD_SUBDIRECTORY(test)
ADD_SUBDIRECTORY(thirdparty)

#
# Add Install Targets
#

IF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")
    INSTALL(DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}" DESTINATION "include")
ENDIF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")

#
# Add Documentation Targets
#

INCLUDE (DocumentationTargets)
